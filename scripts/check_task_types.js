const { createClient } = require('@supabase/supabase-js');

// SupabaseË®≠ÂÆö
const supabaseUrl = 'https://auwmmosfteomieyexkeh.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF1d21tb3NmdGVvbWlleWV4a2VoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTQzNzE1NiwiZXhwIjoyMDcxMDEzMTU2fQ.XKwCDb2pndGMMpp2aaUNVWkpXnOZYV3-IXMwd75s6Wc';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkTaskTypes() {
    console.log('=== Task Type Áä∂Ê≥ÅÁ¢∫Ë™ç ===');
    
    try {
        // ÂÖÉ„ÅÆinvoice_line_items„ÅÆÁä∂Ê≥Å
        const { data: lineItems, error: lineError } = await supabase
            .from('invoice_line_items')
            .select('task_type, raw_label, quantity')
            .order('id');
            
        if (lineError) {
            console.error('ÊòéÁ¥∞È†ÖÁõÆÂèñÂæó„Ç®„É©„Éº:', lineError);
            return;
        }
        
        // task_typeÂàÜÂ∏É
        const taskTypeCounts = {};
        lineItems.forEach(item => {
            taskTypeCounts[item.task_type] = (taskTypeCounts[item.task_type] || 0) + 1;
        });
        
        console.log('üìä ÂÖÉ„Éá„Éº„Çø„ÅÆtask_typeÂàÜÂ∏É:');
        Object.entries(taskTypeCounts).forEach(([type, count]) => {
            console.log(`  ${type}: ${count}‰ª∂`);
        });
        
        // Êñ∞„Åó„ÅÑinvoice_line_items_split„ÅÆÁä∂Ê≥ÅÁ¢∫Ë™ç
        const { data: splitItems, error: splitError } = await supabase
            .from('invoice_line_items_split')
            .select('*')
            .order('id')
            .limit(10);
            
        if (splitError) {
            console.error('ÂàÜÂâ≤È†ÖÁõÆÂèñÂæó„Ç®„É©„Éº:', splitError);
            return;
        }
        
        console.log('\nüìã ÁîüÊàê„Åï„Çå„ÅüsplitÈ†ÖÁõÆ„Çµ„É≥„Éó„É´:');
        splitItems.forEach(item => {
            console.log(`  ${item.raw_label_part} | Êï∞Èáè:${item.quantity} | Âçò‰æ°:${item.unit_price} | ÈáëÈ°ç:${item.amount}`);
        });
        
        // „Çª„ÉÉ„Éà‰ΩúÊ•≠Âà§ÂÆö„ÅÆ„É≠„Ç∏„ÉÉ„ÇØÁ¢∫Ë™ç
        console.log('\nüîç „Çª„ÉÉ„Éà‰ΩúÊ•≠Âà§ÂÆö„ÅåÂøÖË¶Å„Å™„Ç±„Éº„Çπ:');
        const setCandidates = lineItems.filter(item => 
            item.quantity > 1 || 
            (item.raw_label && (
                item.raw_label.includes('‰∏ÄÂºè') ||
                item.raw_label.includes('„Çª„ÉÉ„Éà') ||
                item.raw_label.includes('SET') ||
                item.raw_label.includes('Ë§áÊï∞')
            ))
        );
        
        console.log(`„Çª„ÉÉ„Éà‰ΩúÊ•≠ÂÄôË£ú: ${setCandidates.length}‰ª∂`);
        setCandidates.forEach(item => {
            console.log(`  [${item.task_type}] Êï∞Èáè:${item.quantity} - ${item.raw_label}`);
        });
        
    } catch (error) {
        console.error('„Ç®„É©„Éº:', error);
    }
}

checkTaskTypes().catch(console.error);