'use client'

import { useState, useMemo, useEffect, Fragment } from 'react'
import { useRouter } from 'next/navigation'
import { ArrowLeft, BarChart3, Download, TrendingUp, Calendar, DollarSign, RefreshCw } from 'lucide-react'
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts'
import { useSalesData } from '@/hooks/useSalesData'
import { supabase } from '@/lib/supabase'


export default function SalesManagementPage() {
  const router = useRouter()
  const { invoices, loading, error, getMonthlySales, getCustomerSales, getStatistics, getAvailableYears, exportToCSV, refetch } = useSalesData()
  const [selectedYear, setSelectedYear] = useState<number | undefined>(new Date().getFullYear())
  const [viewMode, setViewMode] = useState<'monthly' | 'customer' | 'payment'>('monthly')
  const [paymentStatusFilter, setPaymentStatusFilter] = useState<'all' | 'paid' | 'unpaid' | 'partial'>('all')
  const [selectedInvoiceIds, setSelectedInvoiceIds] = useState<string[]>([])
  const [bulkPaymentDate, setBulkPaymentDate] = useState<string>('')

  // 顧客カテゴリー（customer-settingsと同じスキーマ）
  type CustomerCategory = { id: string; name: string; companyName: string; isDefault?: boolean }
  const [customerCategories, setCustomerCategories] = useState<CustomerCategory[]>([])
  const [selectedCustomerCategoryId, setSelectedCustomerCategoryId] = useState<string>('all')
  const [showCustomerDropdown, setShowCustomerDropdown] = useState(false)

  const defaultCategories: CustomerCategory[] = useMemo(() => ([
    { id: 'ud', name: 'UD', companyName: '株式会社UDトラックス', isDefault: true },
    { id: 'other', name: 'その他', companyName: '', isDefault: true },
  ]), [])

  useEffect(() => {
    try {
      const stored = typeof window !== 'undefined' ? localStorage.getItem('bankin_customer_categories') : null
      setCustomerCategories(stored ? JSON.parse(stored) : defaultCategories)
    } catch {
      setCustomerCategories(defaultCategories)
    }
  }, [defaultCategories])

  // 会社名の正規化
  // - NFKC正規化
  // - 英字は小文字化
  // - カタカナ→ひらがな（互換性のため）
  // - 会社種別語の除去（株式会社/（株）/有限会社/合同会社/Inc./Co., Ltd など）
  // - 空白/中黒/長音などの記号削除
  const normalizeCompanyName = (name: string): string => {
    let s = (name || '').normalize('NFKC').toLowerCase()
    // カタカナ→ひらがな変換
    s = s.replace(/[\u30A1-\u30F6]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0x60))
    // 会社種別語の除去
    s = s.replace(/株式会社|（株）|\(株\)|有限会社|合同会社|inc\.?|co\.?,?\s*ltd\.?|ltd\.?/g, '')
    // 空白・記号類の削除（中黒・長音・ハイフン・アンダースコア・スラッシュ等）
    s = s.replace(/[\s\u3000\-_.・ー/／]/g, '')
    return s
  }

  const selectedCategory = useMemo(() => customerCategories.find(c => c.id === selectedCustomerCategoryId), [customerCategories, selectedCustomerCategoryId])
  const selectedCategoryName = useMemo(() => {
    if (selectedCustomerCategoryId === 'other' || selectedCustomerCategoryId === 'other-ui') return 'その他'
    return selectedCategory?.name || ''
  }, [selectedCategory, selectedCustomerCategoryId])
  const categoriesForUI = useMemo(() => {
    // 既存カテゴリの中に、「名前が『その他』を含み、会社名が空（正規化後も空）」のものがあるか
    const hasValidOther = customerCategories.some(c => {
      const emptyCompany = !c.companyName || normalizeCompanyName(c.companyName).length === 0
      return emptyCompany && /その他/.test(c.name)
    })
    if (hasValidOther) return customerCategories
    // UI用に合成（id衝突を避けるため 'other-ui' を使用）
    return [...customerCategories, { id: 'other-ui', name: 'その他', companyName: '', isDefault: true }]
  }, [customerCategories])
  const knownPatterns = useMemo(() => {
    return customerCategories
      .filter(c => c.companyName && c.companyName.trim().length > 0)
      .map(c => normalizeCompanyName(c.companyName))
      .filter((s, i, arr) => s.length > 0 && arr.indexOf(s) === i)
  }, [customerCategories])

  const matchesCategory = (rawName: string | null | undefined, category: CustomerCategory): boolean => {
    const nameNorm = normalizeCompanyName(rawName || '')
    const isOther = !category.companyName || normalizeCompanyName(category.companyName).length === 0 || category.id === 'other'
    if (isOther) {
      // 既知の会社名パターンに一切含まれない（または名前が空）
      return nameNorm.length === 0 || knownPatterns.every(p => !nameNorm.includes(p))
    }
    const target = normalizeCompanyName(category.companyName)
    if (target.length === 0) return false
    // 正方向のみの包含一致（請求の顧客名がカテゴリの会社名を含む）
    return nameNorm.includes(target)
  }

  const matchesOther = (rawName: string | null | undefined): boolean => {
    const nameNorm = normalizeCompanyName(rawName || '')
    return nameNorm.length === 0 || knownPatterns.every(p => !nameNorm.includes(p))
  }

  const availableYears = useMemo(() => getAvailableYears(), [getAvailableYears])
  const statistics = useMemo(() => getStatistics(selectedYear), [getStatistics, selectedYear])
  const monthlySales = useMemo(() => getMonthlySales(selectedYear), [getMonthlySales, selectedYear])
  const customerSales = useMemo(() => getCustomerSales(selectedYear), [getCustomerSales, selectedYear])

  // 入金管理用: 年度フィルタ済みの請求書一覧とステータス別サマリー
  const filteredInvoices = useMemo(() => {
    if (!invoices) return []
    if (!selectedYear) return invoices
    return invoices.filter(inv => {
      if (!inv.issue_date) return false
      return new Date(inv.issue_date).getFullYear() === selectedYear
    })
  }, [invoices, selectedYear])

  const paymentSummary = useMemo(() => {
    const result = {
      paid: { count: 0, amount: 0 },
      unpaid: { count: 0, amount: 0 },
      partial: { count: 0, amount: 0 },
      total: { count: 0, amount: 0 },
    }
    for (const inv of filteredInvoices) {
      result.total.count += 1
      result.total.amount += inv.total_amount
      if (inv.payment_status === 'paid') {
        result.paid.count += 1
        result.paid.amount += inv.total_amount
      } else if (inv.payment_status === 'unpaid') {
        result.unpaid.count += 1
        result.unpaid.amount += inv.total_amount
      } else if (inv.payment_status === 'partial') {
        result.partial.count += 1
        result.partial.amount += inv.total_amount
      }
    }
    return result
  }, [filteredInvoices])

  const handleBack = () => router.push('/')

  const handleExportCSV = () => {
    exportToCSV(selectedYear)
  }

  // 入金処理: チェック行を入金済みに更新（入金日は将来的にカラム追加後に保存予定）
  const handleToggleSelect = (id: string) => {
    setSelectedInvoiceIds((prev) => (prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]))
  }

  const handleMarkSelectedAsPaid = async () => {
    if (selectedInvoiceIds.length === 0) return
    try {
      // payment_date がある環境では入金日も保存、ない場合はステータスのみ保存
      const updateData: any = { payment_status: 'paid' }
      if (bulkPaymentDate) {
        updateData.payment_date = bulkPaymentDate
      }

      let { error: updateError } = await supabase
        .from('invoices')
        .update(updateData)
        .in('invoice_id', selectedInvoiceIds)

      // カラム未存在（例: 42703 undefined_column）時は payment_date を除いて再試行
      const needsRetry = updateError && (
        (updateError as any).code === '42703' ||
        String((updateError as any).message || '').includes('payment_date')
      )
      if (needsRetry) {
        const { error: retryErr } = await supabase
          .from('invoices')
          .update({ payment_status: 'paid' } as any)
          .in('invoice_id', selectedInvoiceIds)
        if (retryErr) throw retryErr
      } else if (updateError) {
        throw updateError
      }
    } catch (e) {
      console.error('Failed to mark as paid:', e)
    } finally {
      setSelectedInvoiceIds([])
      await refetch()
    }
  }

  // グラフ用のカラーパレット
  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4', '#84CC16', '#F97316']

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white p-6 rounded-lg shadow-sm max-w-md">
          <h1 className="text-xl font-bold text-red-600 mb-2">エラーが発生しました</h1>
          <p className="text-gray-600 mb-4">{error}</p>
          <button 
            onClick={refetch}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            再試行
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        {/* ヘッダー */}
        <header className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <div className="flex justify-between items-center">
            <div className="flex items-center gap-3">
              <BarChart3 className="text-blue-600" size={32} />
              <h1 className="text-2xl font-bold text-gray-800">売上管理システム</h1>
              {loading && <RefreshCw className="animate-spin text-blue-600" size={20} />}
            </div>
            <div className="flex gap-2">
              <button
                onClick={handleExportCSV}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center gap-2"
              >
                <Download size={20} />
                CSV出力
              </button>
              <button
                onClick={handleBack}
                className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center gap-2"
              >
                <ArrowLeft size={20} />
                戻る
              </button>
            </div>
          </div>
        </header>

        {/* 年度選択・表示モード切替 */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <div className="flex flex-wrap items-center justify-between gap-4">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <Calendar size={20} className="text-gray-600" />
                <label className="text-sm font-medium text-gray-700">対象年度:</label>
                <select
                  value={selectedYear || 'all'}
                  onChange={(e) => setSelectedYear(e.target.value === 'all' ? undefined : Number(e.target.value))}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">全年度</option>
                  {availableYears.map(year => (
                    <option key={year} value={year}>{year}年</option>
                  ))}
                </select>
              </div>
            </div>
            
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium text-gray-700">表示:</span>
              <div className="flex bg-gray-100 rounded-lg p-1">
                <button
                  onClick={() => setViewMode('monthly')}
                  className={`px-3 py-1 rounded text-sm ${
                    viewMode === 'monthly'
                      ? 'bg-white text-blue-600 shadow-sm'
                      : 'text-gray-600 hover:text-gray-800'
                  }`}
                >
                  月別分析
                </button>
                <button
                  onClick={() => setViewMode('customer')}
                  className={`px-3 py-1 rounded text-sm ${
                    viewMode === 'customer'
                      ? 'bg-white text-blue-600 shadow-sm'
                      : 'text-gray-600 hover:text-gray-800'
                  }`}
                >
                  顧客別分析
                </button>
                <button
                  onClick={() => setViewMode('payment')}
                  className={`px-3 py-1 rounded text-sm ${
                    viewMode === 'payment'
                      ? 'bg-white text-blue-600 shadow-sm'
                      : 'text-gray-600 hover:text-gray-800'
                  }`}
                >
                  入金管理
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* 統計情報カード */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          <div className="bg-white rounded-lg shadow-sm p-6">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-sm font-medium text-gray-600">総売上</h3>
                <p className="text-2xl font-bold text-blue-600">¥{statistics.totalSales.toLocaleString()}</p>
              </div>
              <DollarSign className="text-blue-600" size={24} />
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow-sm p-6">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-sm font-medium text-gray-600">請求書数</h3>
                <p className="text-2xl font-bold text-green-600">{statistics.totalInvoices}件</p>
              </div>
              <BarChart3 className="text-green-600" size={24} />
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow-sm p-6">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-sm font-medium text-gray-600">平均単価</h3>
                <p className="text-2xl font-bold text-purple-600">¥{statistics.averageAmount.toLocaleString()}</p>
              </div>
              <TrendingUp className="text-purple-600" size={24} />
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow-sm p-6">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-sm font-medium text-gray-600">回収率</h3>
                <p className="text-2xl font-bold text-orange-600">
                  {statistics.totalSales > 0 ? Math.round((statistics.paidAmount / statistics.totalSales) * 100) : 0}%
                </p>
              </div>
              <Calendar className="text-orange-600" size={24} />
            </div>
          </div>
        </div>

        {/* メインコンテンツ */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          {/* 月別売上グラフ */}
          {viewMode === 'monthly' && (
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-lg font-semibold mb-4">月別売上推移</h2>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={monthlySales}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis 
                      dataKey="month" 
                      tick={{ fontSize: 12 }}
                      angle={-45}
                      textAnchor="end"
                      height={80}
                    />
                    <YAxis 
                      tick={{ fontSize: 12 }}
                      tickFormatter={(value) => `¥${(value / 1000).toFixed(0)}k`}
                    />
                    <Tooltip 
                      formatter={(value: number) => [`¥${value.toLocaleString()}`, '売上']}
                      labelFormatter={(label) => `${label}`}
                    />
                    <Bar dataKey="amount" fill="#3B82F6" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
          )}

          {/* 顧客別売上グラフ */}
          {viewMode === 'customer' && (
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-lg font-semibold mb-4">顧客別売上構成</h2>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={customerSales.slice(0, 8)}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ customer_name, percentage }) => 
                        percentage > 5 ? `${customer_name.slice(0, 10)}...` : ''
                      }
                      outerRadius={100}
                      fill="#8884d8"
                      dataKey="total_amount"
                    >
                      {customerSales.slice(0, 8).map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip 
                      formatter={(value: number) => [`¥${value.toLocaleString()}`, '売上']}
                    />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </div>
          )}

          {/* 入金サマリー */}
          {viewMode === 'payment' && (
            <div className="bg-white rounded-lg shadow-sm p-4">
              <h2 className="text-base font-semibold mb-3">入金サマリー</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div className="p-3 rounded-lg bg-green-50">
                  <div className="text-sm text-gray-700">入金済み（件数/請求額）</div>
                  <div className="mt-0.5 text-xl font-bold text-green-600">¥{paymentSummary.paid.amount.toLocaleString()}</div>
                  <div className="text-sm text-gray-500">{paymentSummary.paid.count}件</div>
                </div>
                <div className="p-3 rounded-lg bg-orange-50">
                  <div className="text-sm text-gray-700">未入金（件数/請求額）</div>
                  <div className="mt-0.5 text-xl font-bold text-orange-600">¥{paymentSummary.unpaid.amount.toLocaleString()}</div>
                  <div className="text-sm text-gray-500">{paymentSummary.unpaid.count}件</div>
                </div>
                <div className="p-3 rounded-lg bg-purple-50">
                  <div className="text-sm text-gray-700">一部入金（件数/請求額）</div>
                  <div className="mt-0.5 text-xl font-bold text-purple-600">¥{paymentSummary.partial.amount.toLocaleString()}</div>
                  <div className="text-sm text-gray-500">{paymentSummary.partial.count}件</div>
                </div>
                <div className="p-3 rounded-lg bg-blue-50">
                  <div className="text-sm text-gray-700">合計（件数/請求額）</div>
                  <div className="mt-0.5 text-xl font-bold text-blue-600">¥{paymentSummary.total.amount.toLocaleString()}</div>
                  <div className="text-sm text-gray-500">{paymentSummary.total.count}件</div>
                </div>
              </div>
            </div>
          )}

          {/* 売上詳細情報 */}
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-lg font-semibold mb-4">詳細情報</h2>
            <div className="space-y-4">
              <div className="flex justify-between items-center p-3 bg-blue-50 rounded">
                <span className="text-sm font-medium text-gray-700">入金済み金額</span>
                <span className="text-lg font-bold text-blue-600">¥{statistics.paidAmount.toLocaleString()}</span>
              </div>
              <div className="flex justify-between items-center p-3 bg-orange-50 rounded">
                <span className="text-sm font-medium text-gray-700">未入金額</span>
                <span className="text-lg font-bold text-orange-600">¥{statistics.unpaidAmount.toLocaleString()}</span>
              </div>
              <div className="flex justify-between items-center p-3 bg-green-50 rounded">
                <span className="text-sm font-medium text-gray-700">主要顧客</span>
                <span className="text-sm font-bold text-green-600">{statistics.topCustomer}</span>
              </div>
            </div>
          </div>
        </div>

        {/* データテーブル */}
        <div className="bg-white rounded-lg shadow-sm overflow-hidden">
          <div className="p-6 border-b">
            <h2 className="text-lg font-semibold">
              {viewMode === 'monthly' ? '月別売上一覧' : viewMode === 'customer' ? '顧客別売上一覧' : '入金管理（請求一覧）'}
            </h2>
            {viewMode === 'payment' && (
              <>
                {/* 一括入金操作（上部） */}
                <div className="mt-4 flex flex-col md:flex-row md:items-center md:justify-between gap-3">
                  <div className="flex items-center gap-2">
                    <label className="text-sm text-gray-700">入金日</label>
                    <input
                      type="date"
                      value={bulkPaymentDate}
                      onChange={(e) => setBulkPaymentDate(e.target.value)}
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div className="flex items-center gap-3">
                    <button
                      onClick={handleMarkSelectedAsPaid}
                      disabled={selectedInvoiceIds.length === 0}
                      className={`px-4 py-2 rounded-lg text-white ${selectedInvoiceIds.length === 0 ? 'bg-gray-300 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'}`}
                    >
                      選択した明細を入金済みにする
                    </button>
                    <div className="text-sm text-gray-500">選択中: {selectedInvoiceIds.length}件</div>
                  </div>
                </div>

                {/* フィルタ */}
                <div className="mt-4 flex items-center gap-3">
                <label className="text-sm text-gray-700">入金状況:</label>
                <select
                  value={paymentStatusFilter}
                  onChange={(e) => setPaymentStatusFilter(e.target.value as 'all' | 'paid' | 'unpaid' | 'partial')}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">すべて</option>
                  <option value="paid">入金済み</option>
                  <option value="unpaid">未入金</option>
                  <option value="partial">一部入金</option>
                </select>

                {/* 顧客選択 */}
                <div className="relative">
                  <button
                    onClick={() => setShowCustomerDropdown(v => !v)}
                    className="px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
                  >
                    顧客選択{selectedCustomerCategoryId !== 'all' ? `: ${selectedCategoryName}` : ''}
                  </button>
                  {showCustomerDropdown && (
                    <div className="absolute z-10 mt-2 w-72 bg-white border border-gray-200 rounded shadow">
                      <button
                        onClick={() => { setSelectedCustomerCategoryId('all'); setShowCustomerDropdown(false) }}
                        className="w-full text-left px-3 py-2 hover:bg-gray-50 text-sm"
                      >
                        すべての顧客
                      </button>
                      <div className="max-h-64 overflow-auto">
                        {categoriesForUI.map(cat => (
                          <button
                            key={cat.id}
                            onClick={() => { setSelectedCustomerCategoryId(cat.id); setShowCustomerDropdown(false) }}
                            className={`w-full text-left px-3 py-2 hover:bg-gray-50 ${selectedCustomerCategoryId === cat.id ? 'bg-blue-50' : ''}`}
                          >
                            <div className="flex flex-col">
                              <span className="text-sm font-medium text-gray-800">{cat.name}</span>
                              <span className="text-xs text-gray-500">{cat.companyName || '（手動入力/その他）'}</span>
                            </div>
                          </button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
                {/* ↑ ここまでがフィルタの中身。ラッパーをクローズ */}
                </div>
              </>
            )}
          </div>
          
          {loading ? (
            <div className="p-8 text-center text-gray-500">
              データを読み込み中...
            </div>
          ) : viewMode === 'monthly' ? (
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    年月
                  </th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    売上金額
                  </th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    請求書数
                  </th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    平均単価
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {monthlySales.length === 0 ? (
                  <tr>
                    <td colSpan={4} className="px-6 py-8 text-center text-gray-500">
                      データがありません
                    </td>
                  </tr>
                ) : (
                  monthlySales.map((item) => (
                    <tr key={item.month} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {item.month}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                        ¥{item.amount.toLocaleString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                        {item.count}件
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                        ¥{Math.round(item.amount / item.count).toLocaleString()}
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          ) : viewMode === 'customer' ? (
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    顧客名
                  </th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    売上金額
                  </th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    請求書数
                  </th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    構成比
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {customerSales.length === 0 ? (
                  <tr>
                    <td colSpan={4} className="px-6 py-8 text-center text-gray-500">
                      データがありません
                    </td>
                  </tr>
                ) : (
                  customerSales.map((customer) => (
                    <tr key={customer.customer_name} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {customer.customer_name}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                        ¥{customer.total_amount.toLocaleString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                        {customer.invoice_count}件
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                        {customer.percentage.toFixed(1)}%
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          ) : (
            <>
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">請求書ID</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">請求日</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">件名</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">発注番号</th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">請求金額</th>
                    <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">入金日</th>
                  </tr>
                  <tr className="bg-gray-50/50">
                    <th className="px-6 py-2"></th>
                    <th className="px-6 py-2 text-xs font-normal text-gray-500">請求月</th>
                    <th className="px-6 py-2 text-xs font-normal text-gray-500">登録番号</th>
                    <th className="px-6 py-2 text-xs font-normal text-gray-500">オーダー番号</th>
                    <th className="px-6 py-2 text-xs font-normal text-gray-500">詳細ボタン</th>
                    <th className="px-6 py-2 text-xs font-normal text-gray-500">一部入金額</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                    {filteredInvoices
                      .filter(inv => paymentStatusFilter === 'all' ? true : inv.payment_status === paymentStatusFilter)
                      .filter(inv => {
                        if (selectedCustomerCategoryId === 'all') return true
                        if (selectedCustomerCategoryId === 'other' || selectedCustomerCategoryId === 'other-ui') return matchesOther(inv.customer_name)
                        return selectedCategory ? matchesCategory(inv.customer_name, selectedCategory) : true
                      })
                      .map((inv) => {
                        const monthLabel = inv.issue_date ? (() => { const d = new Date(inv.issue_date); return `${d.getFullYear()}年${d.getMonth()+1}月` })() : ''
                        return (
                          <Fragment key={inv.invoice_id}>
                            <tr className="hover:bg-gray-50">
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{inv.invoice_id}</td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{inv.issue_date ? new Date(inv.issue_date).toLocaleDateString('ja-JP') : ''}</td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{inv.subject_name || ''}</td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">-</td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">¥{inv.total_amount.toLocaleString()}</td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-center">{inv.payment_date ? new Date(inv.payment_date).toLocaleDateString('ja-JP') : ''}</td>
                            </tr>
                            <tr className="bg-gray-50/50">
                              <td className="px-6 py-2 text-xs text-gray-600">
                                <span className="text-gray-500">請求月:</span> <span className="ml-1">{monthLabel}</span>
                              </td>
                              <td className="px-6 py-2 text-xs text-gray-600">
                                <span className="text-gray-500">登録番号:</span> <span className="ml-1">-</span>
                              </td>
                              <td className="px-6 py-2 text-xs text-gray-600">
                                <span className="text-gray-500">オーダー番号:</span> <span className="ml-1">-</span>
                              </td>
                              <td className="px-6 py-2">
                                <button type="button" className="px-2 py-1 border rounded text-gray-700 hover:bg-gray-100">詳細</button>
                              </td>
                              <td className="px-6 py-2 text-xs text-gray-600">
                                <span className="text-gray-500">一部入金額:</span> <span className="ml-1">-</span>
                              </td>
                              <td className="px-6 py-2"></td>
                            </tr>
                          </Fragment>
                        )
                      })
                    {filteredInvoices
                      .filter(inv => paymentStatusFilter === 'all' ? true : inv.payment_status === paymentStatusFilter)
                      .filter(inv => {
                        if (selectedCustomerCategoryId === 'all') return true
                        if (selectedCustomerCategoryId === 'other' || selectedCustomerCategoryId === 'other-ui') return matchesOther(inv.customer_name)
                        return selectedCategory ? matchesCategory(inv.customer_name, selectedCategory) : true
                      }).length === 0 && (
                      <tr>
                        <td colSpan={7} className="px-6 py-8 text-center text-gray-500">データがありません</td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
