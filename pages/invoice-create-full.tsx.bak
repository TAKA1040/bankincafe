'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import SecurityWrapper from '@/components/layout/SecurityWrapper'
import Navbar from '@/components/layout/Navbar'
import { Button } from '@/components/ui/Button'
import { Input } from '@/components/ui/Input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card'
import { 
  Plus, 
  Trash2, 
  Calculator, 
  FileText, 
  Save,
  ArrowLeft
} from 'lucide-react'
import { generateInvoiceNumber, formatCurrency } from '@/lib/utils'

interface WorkItem {
  id: string
  type: 'individual' | 'set'
  name: string
  quantity: number
  unitPrice: number
  amount: number
  setDetails?: string[]
}

const workHistorySample = [
  { name: 'バンパー修理', unitPrice: 100000, frequency: 15 },
  { name: 'サイドパネル塗装', unitPrice: 50000, frequency: 8 },
  { name: 'フロントパネル交換', unitPrice: 80000, frequency: 12 },
  { name: 'ライト調整', unitPrice: 15000, frequency: 25 },
  { name: 'ドア交換', unitPrice: 120000, frequency: 5 },
]

export default function InvoiceCreatePage() {
  const router = useRouter()
  
  // Basic form state
  const [billingDate, setBillingDate] = useState(new Date().toISOString().split('T')[0])
  const [customerCategory, setCustomerCategory] = useState<'UD' | 'その他'>('UD')
  const [customerName, setCustomerName] = useState('株式会社UDトラックス')
  const [subject, setSubject] = useState('')
  const [registrationNumber, setRegistrationNumber] = useState('')
  const [orderNumber, setOrderNumber] = useState('')
  const [workItems, setWorkItems] = useState<WorkItem[]>([])
  
  // Form validation and state
  const [errors, setErrors] = useState<Record<string, string>>({})
  const [loading, setLoading] = useState(false)

  const handleCustomerTypeChange = (type: 'UD' | 'その他') => {
    setCustomerCategory(type)
    if (type === 'UD') {
      setCustomerName('株式会社UDトラックス')
    } else {
      setCustomerName('')
    }
    setErrors(prev => ({ ...prev, customerName: '' }))
  }

  const addWorkItem = (type: 'individual' | 'set') => {
    const newItem: WorkItem = {
      id: Date.now().toString(),
      type,
      name: '',
      quantity: 1,
      unitPrice: 0,
      amount: 0,
      setDetails: type === 'set' ? [''] : undefined
    }
    setWorkItems([...workItems, newItem])
  }

  const updateWorkItem = (id: string, field: keyof WorkItem, value: any) => {
    setWorkItems(prev => prev.map(item => {
      if (item.id === id) {
        const updatedItem = { ...item, [field]: value }
        if (field === 'quantity' || field === 'unitPrice') {
          updatedItem.amount = updatedItem.quantity * updatedItem.unitPrice
        }
        return updatedItem
      }
      return item
    }))
  }

  const removeWorkItem = (id: string) => {
    setWorkItems(prev => prev.filter(item => item.id !== id))
  }

  const addSetDetail = (itemId: string) => {
    setWorkItems(prev => prev.map(item => {
      if (item.id === itemId && item.setDetails) {
        return { ...item, setDetails: [...item.setDetails, ''] }
      }
      return item
    }))
  }

  const updateSetDetail = (itemId: string, index: number, value: string) => {
    setWorkItems(prev => prev.map(item => {
      if (item.id === itemId && item.setDetails) {
        const newDetails = [...item.setDetails]
        newDetails[index] = value
        return { ...item, setDetails: newDetails }
      }
      return item
    }))
  }

  const removeSetDetail = (itemId: string, index: number) => {
    setWorkItems(prev => prev.map(item => {
      if (item.id === itemId && item.setDetails && item.setDetails.length > 1) {
        const newDetails = [...item.setDetails]
        newDetails.splice(index, 1)
        return { ...item, setDetails: newDetails }
      }
      return item
    }))
  }

  // Calculations
  const subtotal = workItems.reduce((sum, item) => sum + item.amount, 0)
  const tax = Math.floor(subtotal * 0.1)
  const total = subtotal + tax

  const validateForm = () => {
    const newErrors: Record<string, string> = {}
    
    if (!customerName.trim()) {
      newErrors.customerName = '顧客名は必須です'
    }
    if (!subject.trim()) {
      newErrors.subject = '件名は必須です'
    }
    if (workItems.length === 0) {
      newErrors.items = '作業項目を少なくとも1つ追加してください'
    }
    
    workItems.forEach((item, index) => {
      if (!item.name.trim()) {
        newErrors[`item_${index}_name`] = '作業内容は必須です'
      }
      if (item.quantity < 1) {
        newErrors[`item_${index}_quantity`] = '数量は1以上を入力してください'
      }
      if (item.unitPrice <= 0) {
        newErrors[`item_${index}_price`] = '単価は0より大きい値を入力してください'
      }
    })
    
    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSave = async (isDraft = false) => {
    if (!validateForm()) {
      return
    }

    setLoading(true)
    
    try {
      const invoice = {
        invoiceNumber: generateInvoiceNumber(),
        billingDate,
        customerCategory,
        customerName: customerCategory === 'UD' ? '株式会社UDトラックス' : customerName,
        subject,
        registrationNumber,
        orderNumber,
        items: workItems,
        subtotal,
        tax,
        total,
        status: isDraft ? 'draft' : 'finalized',
        createdAt: new Date().toISOString()
      }

      // Simulate save operation
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      console.log('Invoice saved:', invoice)
      alert(isDraft ? '下書きを保存しました' : '請求書を確定しました')
      
      router.push('/invoice-list')
    } catch (error) {
      alert('保存に失敗しました')
    } finally {
      setLoading(false)
    }
  }

  return (
    <SecurityWrapper>
      <div className="min-h-screen bg-secondary-50">
        <Navbar />
        
        <div className="container py-6">
          {/* Header */}
          <div className="flex justify-between items-center mb-6">
            <div>
              <h1 className="text-2xl font-bold text-secondary-900">請求書作成</h1>
              <p className="text-secondary-600">新しい請求書を作成します</p>
            </div>
            <Button
              variant="secondary"
              onClick={() => router.push('/')}
              icon={<ArrowLeft className="h-4 w-4" />}
            >
              戻る
            </Button>
          </div>

          {/* Basic Information */}
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>基本情報</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Input
                  type="date"
                  label="請求日"
                  value={billingDate}
                  onChange={(e) => setBillingDate(e.target.value)}
                  required
                />
                
                <div>
                  <label className="label">顧客タイプ</label>
                  <div className="flex gap-4 mt-2">
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="customerType"
                        value="UD"
                        checked={customerCategory === 'UD'}
                        onChange={() => handleCustomerTypeChange('UD')}
                        className="mr-2"
                      />
                      UD
                    </label>
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="customerType"
                        value="その他"
                        checked={customerCategory === 'その他'}
                        onChange={() => handleCustomerTypeChange('その他')}
                        className="mr-2"
                      />
                      その他
                    </label>
                  </div>
                </div>

                <Input
                  label="顧客名 *"
                  value={customerName}
                  onChange={(e) => setCustomerName(e.target.value)}
                  disabled={customerCategory === 'UD'}
                  error={errors.customerName}
                  placeholder={customerCategory === 'UD' ? '株式会社UDトラックス' : '顧客名を入力'}
                  required
                />

                <Input
                  label="件名 *"
                  value={subject}
                  onChange={(e) => {
                    setSubject(e.target.value)
                    setErrors(prev => ({ ...prev, subject: '' }))
                  }}
                  error={errors.subject}
                  placeholder="件名を入力"
                  required
                />

                <Input
                  label="登録番号"
                  value={registrationNumber}
                  onChange={(e) => setRegistrationNumber(e.target.value)}
                  placeholder="登録番号 (任意)"
                />

                <Input
                  label="発注番号"
                  value={orderNumber}
                  onChange={(e) => setOrderNumber(e.target.value)}
                  placeholder="発注番号 (任意)"
                />
              </div>
            </CardContent>
          </Card>

          {/* Work Items */}
          <Card className="mb-6">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>作業項目</CardTitle>
                <div className="flex gap-2">
                  <Button
                    variant="success"
                    size="sm"
                    onClick={() => addWorkItem('individual')}
                    icon={<Plus className="h-4 w-4" />}
                  >
                    個別作業
                  </Button>
                  <Button
                    variant="success"
                    size="sm"
                    onClick={() => addWorkItem('set')}
                    icon={<Plus className="h-4 w-4" />}
                  >
                    セット作業
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              {workItems.length === 0 ? (
                <div className="text-center py-12 border-2 border-dashed border-secondary-300 rounded-lg">
                  <FileText className="h-12 w-12 text-secondary-400 mx-auto mb-4" />
                  <p className="text-secondary-600">作業項目を追加してください</p>
                  {errors.items && (
                    <p className="text-danger-600 text-sm mt-2">{errors.items}</p>
                  )}
                </div>
              ) : (
                <div className="space-y-4">
                  {workItems.map((item, index) => (
                    <div key={item.id} className="border border-secondary-200 rounded-lg p-4 bg-secondary-50">
                      <div className="flex justify-between items-center mb-4">
                        <div className={`px-3 py-1 rounded-full text-xs font-medium ${
                          item.type === 'individual' 
                            ? 'bg-success-100 text-success-700' 
                            : 'bg-warning-100 text-warning-700'
                        }`}>
                          {item.type === 'individual' ? '個別作業' : 'セット作業'}
                        </div>
                        <Button
                          variant="danger"
                          size="sm"
                          onClick={() => removeWorkItem(item.id)}
                          icon={<Trash2 className="h-4 w-4" />}
                        >
                          削除
                        </Button>
                      </div>

                      <div className="bg-white p-4 rounded-lg">
                        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
                          <div className="md:col-span-2">
                            <Input
                              label="作業内容 *"
                              value={item.name}
                              onChange={(e) => updateWorkItem(item.id, 'name', e.target.value)}
                              error={errors[`item_${index}_name`]}
                              placeholder="作業内容を入力"
                            />
                          </div>
                          <Input
                            label="数量 *"
                            type="number"
                            value={item.quantity}
                            onChange={(e) => updateWorkItem(item.id, 'quantity', Math.max(1, parseInt(e.target.value) || 1))}
                            error={errors[`item_${index}_quantity`]}
                            min="1"
                          />
                          <Input
                            label="単価 *"
                            type="number"
                            value={item.unitPrice}
                            onChange={(e) => updateWorkItem(item.id, 'unitPrice', parseInt(e.target.value) || 0)}
                            error={errors[`item_${index}_price`]}
                            min="0"
                          />
                        </div>

                        <div className="flex justify-between items-center mb-4">
                          <span className="text-sm text-secondary-600">金額</span>
                          <span className="text-lg font-semibold text-secondary-900">
                            {formatCurrency(item.amount)}
                          </span>
                        </div>

                        {/* Set Details */}
                        {item.type === 'set' && (
                          <div className="border-t border-secondary-200 pt-4">
                            <div className="flex justify-between items-center mb-3">
                              <h4 className="text-sm font-medium text-secondary-900">セット内作業内容</h4>
                              <Button
                                variant="success"
                                size="sm"
                                onClick={() => addSetDetail(item.id)}
                                icon={<Plus className="h-3 w-3" />}
                              >
                                追加
                              </Button>
                            </div>
                            {item.setDetails?.map((detail, detailIndex) => (
                              <div key={detailIndex} className="flex gap-2 mb-2">
                                <Input
                                  value={detail}
                                  onChange={(e) => updateSetDetail(item.id, detailIndex, e.target.value)}
                                  placeholder={`詳細作業 ${detailIndex + 1}`}
                                />
                                {item.setDetails!.length > 1 && (
                                  <Button
                                    variant="danger"
                                    size="sm"
                                    onClick={() => removeSetDetail(item.id, detailIndex)}
                                  >
                                    ×
                                  </Button>
                                )}
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Calculation */}
          {workItems.length > 0 && (
            <Card className="mb-6">
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Calculator className="h-5 w-5 mr-2" />
                  合計金額
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-secondary-600">小計</span>
                    <span className="font-semibold">{formatCurrency(subtotal)}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-secondary-600">消費税 (10%)</span>
                    <span className="font-semibold">{formatCurrency(tax)}</span>
                  </div>
                  <div className="flex justify-between items-center text-lg font-bold text-primary-600 pt-3 border-t border-secondary-200">
                    <span>合計</span>
                    <span>{formatCurrency(total)}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Save Buttons */}
          <div className="flex justify-center gap-4">
            <Button
              variant="secondary"
              size="lg"
              onClick={() => handleSave(true)}
              loading={loading}
              icon={<Save className="h-5 w-5" />}
            >
              下書き保存
            </Button>
            <Button
              variant="primary"
              size="lg"
              onClick={() => handleSave()}
              loading={loading}
              icon={<FileText className="h-5 w-5" />}
            >
              請求書を確定
            </Button>
          </div>
        </div>
      </div>
    </SecurityWrapper>
  )
}